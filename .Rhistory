poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
#1724, 1746 and 1749 are where the unbroken sequences of years begin, so we sum these into one year for each dataset
fiction_data$year <- plyr::mapvalues(fiction_data$year, 1701:1724, rep(1724, length(1701:1724)))
poetry_data$year <- plyr::mapvalues(poetry_data$year, 1700:1746, rep(1746, length(1700:1746)))
drama_data$year <- plyr::mapvalues(drama_data$year, 1704:1749, rep(1749, length(1704:1749)))
#aggreagate fiction, poetry and drama across year and word
fiction_data <- aggregate(. ~ year + word, fiction_data, sum)
poetry_data <- aggregate(. ~ year + word, poetry_data, sum)
drama_data <- aggregate(. ~ year + word, drama_data, sum)
#pivot the data wider
fiction_data <- fiction_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
poetry_data <- poetry_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
drama_data <- drama_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
fiction_data
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], 0:9)
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
#1724, 1746 and 1749 are where the unbroken sequences of years begin, so we sum these into one year for each dataset
fiction_data$year <- plyr::mapvalues(fiction_data$year, 1701:1724, rep(1724, length(1701:1724)))
poetry_data$year <- plyr::mapvalues(poetry_data$year, 1700:1746, rep(1746, length(1700:1746)))
drama_data$year <- plyr::mapvalues(drama_data$year, 1704:1749, rep(1749, length(1704:1749)))
fiction_data
fiction_data <- aggregate(. ~ year + word, fiction_data, sum)
fiction_data
fiction_data$word
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], 0:9)
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
#1724, 1746 and 1749 are where the unbroken sequences of years begin, so we sum these into one year for each dataset
fiction_data$year <- plyr::mapvalues(fiction_data$year, 1701:1724, rep(1724, length(1701:1724)))
poetry_data$year <- plyr::mapvalues(poetry_data$year, 1700:1746, rep(1746, length(1700:1746)))
drama_data$year <- plyr::mapvalues(drama_data$year, 1704:1749, rep(1749, length(1704:1749)))
fiction_data
fiction_data$word
table(fiction_data$word)
sort(table(fiction_data$word), decreasing = T)
fiction_data %>% group_by(word, year) %>% summarise(termfreq = sum(termfreq))
as_tibble(fiction_data)
?aggregate
aggregate(weight ~ feed, data = chickwts, mean)
aggregate(breaks ~ wool + tension, data = warpbreaks, mean)
aggregate(cbind(Ozone, Temp) ~ Month, data = airquality, mean)
aggregate(cbind(ncases, ncontrols) ~ alcgp + tobgp, data = esoph, sum)
fiction_data
aggregate(termfreq ~ year + word, fiction_data, sum)
fiction_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
fiction_data %>% group_by(year, word) %>% summarise(termfreq = sum(termfreq))
fiction_data
fiction_data$word
sort(fiction_data$word)
alpha_vector
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1])
#remove every element in alpha vector from the data
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
clean_data <- function(x) {
x[which(!grepl("0", x)),] <- "NULL"
x[which(!grepl("1", x)),] <- "NULL"
x[which(!grepl("2", x)),] <- "NULL"
x[which(!grepl("3", x)),] <- "NULL"
x[which(!grepl("4", x)),] <- "NULL"
x[which(!grepl("5", x)),] <- "NULL"
x[which(!grepl("6", x)),] <- "NULL"
x[which(!grepl("7", x)),] <- "NULL"
x[which(!grepl("8", x)),] <- "NULL"
x[which(!grepl("9", x)),] <- "NULL"
return(x)
}
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#declare the fun
clean_data <- function(x) {
x[which(!grepl("0", x)),] <- "NULL"
x[which(!grepl("1", x)),] <- "NULL"
x[which(!grepl("2", x)),] <- "NULL"
x[which(!grepl("3", x)),] <- "NULL"
x[which(!grepl("4", x)),] <- "NULL"
x[which(!grepl("5", x)),] <- "NULL"
x[which(!grepl("6", x)),] <- "NULL"
x[which(!grepl("7", x)),] <- "NULL"
x[which(!grepl("8", x)),] <- "NULL"
x[which(!grepl("9", x)),] <- "NULL"
return(x)
}
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], "NULL")
#remove every element in alpha vector from the data
fiction_data$word <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data$word <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data$word <- drama_data %>% filter(!word %in% alpha_vector)
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#declare the fun
clean_data <- function(x) {
x[which(!grepl("0", x)),] <- "NULL"
x[which(!grepl("1", x)),] <- "NULL"
x[which(!grepl("2", x)),] <- "NULL"
x[which(!grepl("3", x)),] <- "NULL"
x[which(!grepl("4", x)),] <- "NULL"
x[which(!grepl("5", x)),] <- "NULL"
x[which(!grepl("6", x)),] <- "NULL"
x[which(!grepl("7", x)),] <- "NULL"
x[which(!grepl("8", x)),] <- "NULL"
x[which(!grepl("9", x)),] <- "NULL"
return(x)
}
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], "NULL")
#remove every element in alpha vector from the data
fiction_data$word <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data$word <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data$word <- drama_data %>% filter(!word %in% alpha_vector)
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
x <- fiction_data$word
x[which(!grepl("0", x)),]
x[which(!grepl("0", x))]
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#declare the funtion clean data, which replaces every element with a number with NULL
clean_data <- function(x) {
x[which(grepl("0", x))] <- "NULL"
x[which(grepl("1", x))] <- "NULL"
x[which(grepl("2", x))] <- "NULL"
x[which(grepl("3", x))] <- "NULL"
x[which(grepl("4", x))] <- "NULL"
x[which(grepl("5", x))] <- "NULL"
x[which(grepl("6", x))] <- "NULL"
x[which(grepl("7", x))] <- "NULL"
x[which(grepl("8", x))] <- "NULL"
x[which(grepl("9", x))] <- "NULL"
return(x)
}
#apply clean data to each of the word vectors
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], "NULL")
#remove every element in alpha vector from the data
fiction_data$word <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data$word <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data$word <- drama_data %>% filter(!word %in% alpha_vector)
#remove every element in alpha vector from the data
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
fiction_data
fiction_data$word
sort(table(fiction_data$word), decreasing = T)[1:10]
sort(table(fiction_data$word), decreasing = T)[1:100]
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#declare the funtion clean data, which replaces every element with a number with NULL
clean_data <- function(x) {
x[which(grepl("0", x))] <- "NULL"
x[which(grepl("1", x))] <- "NULL"
x[which(grepl("2", x))] <- "NULL"
x[which(grepl("3", x))] <- "NULL"
x[which(grepl("4", x))] <- "NULL"
x[which(grepl("5", x))] <- "NULL"
x[which(grepl("6", x))] <- "NULL"
x[which(grepl("7", x))] <- "NULL"
x[which(grepl("8", x))] <- "NULL"
x[which(grepl("9", x))] <- "NULL"
return(x)
}
#apply clean data to each of the word vectors
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], "NULL")
#remove every element in alpha vector from the data
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
#1724, 1746 and 1749 are where the unbroken sequences of years begin, so we sum these into one year for each dataset
fiction_data$year <- plyr::mapvalues(fiction_data$year, 1701:1724, rep(1724, length(1701:1724)))
poetry_data$year <- plyr::mapvalues(poetry_data$year, 1700:1746, rep(1746, length(1700:1746)))
drama_data$year <- plyr::mapvalues(drama_data$year, 1704:1749, rep(1749, length(1704:1749)))
#aggreagate fiction, poetry and drama across year and word
fiction_data <- aggregate(. ~ year + word, fiction_data, sum)
poetry_data <- aggregate(. ~ year + word, poetry_data, sum)
drama_data <- aggregate(. ~ year + word, drama_data, sum)
#pivot the data wider
fiction_data <- fiction_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
poetry_data <- poetry_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
drama_data <- drama_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
fiction_data
library(dplyr)
library(tidyr)
library(reshape2)
#load in our data
fiction_data <- read.csv("fiction_yearly_summary.csv", stringsAsFactors = F)
poetry_data <- read.csv("poetry_yearly_summary.csv", stringsAsFactors = F)
drama_data <- read.csv("drama_yearly_summary.csv", stringsAsFactors = F)
#read in roman numerals text file
roman_numerals <- read.csv("romannumerals.txt", stringsAsFactors = F)
#drop this column as we do not need it
fiction_data$correctionapplied <- NULL
poetry_data$correctionapplied <- NULL
drama_data$correctionapplied <- NULL
#strip spaces and punctuation from the word columns
fiction_data$word <- gsub('[[:punct:]]+','', fiction_data$word)
poetry_data$word <- gsub('[[:punct:]]+','', poetry_data$word)
drama_data$word <- gsub('[[:punct:]]+','', drama_data$word)
fiction_data$word <- gsub("[[:space:]]", "", fiction_data$word)
poetry_data$word <- gsub('[[:space:]]','', poetry_data$word)
drama_data$word <- gsub('[[:space:]]','', drama_data$word)
#declare the funtion clean data, which replaces every element with a number with NULL
clean_data <- function(x) {
x[which(grepl("0", x))] <- "NULL"
x[which(grepl("1", x))] <- "NULL"
x[which(grepl("2", x))] <- "NULL"
x[which(grepl("3", x))] <- "NULL"
x[which(grepl("4", x))] <- "NULL"
x[which(grepl("5", x))] <- "NULL"
x[which(grepl("6", x))] <- "NULL"
x[which(grepl("7", x))] <- "NULL"
x[which(grepl("8", x))] <- "NULL"
x[which(grepl("9", x))] <- "NULL"
return(x)
}
#apply clean data to each of the word vectors
fiction_data$word <- clean_data(fiction_data$word)
poetry_data$word <- clean_data(poetry_data$word)
drama_data$word <- clean_data(drama_data$word)
#create alpha_vector which contains every letter of the alphabet, except a and i, an empty element, roman numerals and a few other artefacts we want to tidy up
alpha_vector <- c("", "ALLTOKENS", "DICTIONARYWORD", "ALPHABETIC", letters[-c(1, 9)], roman_numerals[,1], "NULL")
#remove every element in alpha vector from the data
fiction_data <- fiction_data %>% filter(!word %in% alpha_vector)
poetry_data <- poetry_data %>% filter(!word %in% alpha_vector)
drama_data <- drama_data %>% filter(!word %in% alpha_vector)
#1724, 1746 and 1749 are where the unbroken sequences of years begin, so we sum these into one year for each dataset
fiction_data$year <- plyr::mapvalues(fiction_data$year, 1701:1724, rep(1724, length(1701:1724)))
poetry_data$year <- plyr::mapvalues(poetry_data$year, 1700:1746, rep(1746, length(1700:1746)))
drama_data$year <- plyr::mapvalues(drama_data$year, 1704:1749, rep(1749, length(1704:1749)))
#aggreagate fiction, poetry and drama across year and word
fiction_data <- aggregate(. ~ year + word, fiction_data, sum)
poetry_data <- aggregate(. ~ year + word, poetry_data, sum)
drama_data <- aggregate(. ~ year + word, drama_data, sum)
#pivot the data wider
fiction_data <- fiction_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
poetry_data <- poetry_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
drama_data <- drama_data %>% pivot_wider(names_from = word, values_from = termfreq, values_fill = 0, names_repair = "unique")
#turn all the raw counts into relative frequencies, normalise them by column
fiction_data[,2:dim(fiction_data)[2]] <- scale(fiction_data[,2:dim(fiction_data)[2]] / rowSums(fiction_data[,2:dim(fiction_data)[2]]))
poetry_data[,2:dim(poetry_data)[2]] <- scale(poetry_data[,2:dim(poetry_data)[2]] / rowSums(poetry_data[,2:dim(poetry_data)[2]]))
drama_data[,2:dim(drama_data)[2]] <- scale(drama_data[,2:dim(drama_data)[2]] / rowSums(drama_data[,2:dim(drama_data)[2]]))
#apply cosine distance to the datasets
fiction_dist <- dist.cosine(as.matrix(fiction_data))
poetry_dist <- dist.cosine(as.matrix(poetry_data))
drama_dist <- dist.cosine(as.matrix(drama_data))
#reshape the matrix into dataframes
fiction_dist <- melt(as.matrix(fiction_dist), variable.names(c("to", "from")))
poetry_dist <- melt(as.matrix(poetry_dist), variable.names(c("to", "from")))
drama_dist <- melt(as.matrix(drama_dist), variable.names(c("to", "from")))
#change the column names so we know the direction
colnames(fiction_dist)[1:2] <- c("from", "to")
colnames(poetry_dist)[1:2] <- c("from", "to")
colnames(drama_dist)[1:2] <- c("from", "to")
#and map our values
fiction_dist$from <- plyr::mapvalues(fiction_dist$from, 1:199, fiction_data$year...1)
fiction_dist$to <- plyr::mapvalues(fiction_dist$to, 1:199, fiction_data$year...1)
poetry_dist$from <- plyr::mapvalues(poetry_dist$from, 1:177, poetry_data$year...1)
poetry_dist$to <- plyr::mapvalues(poetry_dist$to, 1:177, poetry_data$year...1)
drama_dist$from <- plyr::mapvalues(drama_dist$from, 1:174, drama_data$year...1)
drama_dist$to <- plyr::mapvalues(drama_dist$to, 1:174, drama_data$year...1)
#remove all our empty distances
fiction_dist <- fiction_dist %>% filter(value != 0)
poetry_dist <- poetry_dist %>% filter(value != 0)
drama_dist <- drama_dist %>% filter(value != 0)
#divide our dataframe into distances forward
fiction_dist_forward <- fiction_dist %>% filter(to > from)
poetry_dist_forward <- poetry_dist %>% filter(to > from)
drama_dist_forward <- drama_dist %>% filter(to > from)
#and back
fiction_dist_backward <- fiction_dist %>% filter(to < from)
poetry_dist_backward <- poetry_dist %>% filter(to < from)
drama_dist_backward <- drama_dist %>% filter(to < from)
#mean fiction poetry and drama by where the distance is coming from
fiction_dist_forward <- fiction_dist_forward %>% group_by(from) %>% summarise(value = mean(value))
poetry_dist_forward <- poetry_dist_forward %>% group_by(from) %>% summarise(value = mean(value))
drama_dist_forward <- drama_dist_forward %>% group_by(from) %>% summarise(value = mean(value))
fiction_dist_backward <- fiction_dist_backward %>% group_by(from) %>% summarise(value = mean(value))
poetry_dist_backward <- poetry_dist_backward %>% group_by(from) %>% summarise(value = mean(value))
drama_dist_backward <- drama_dist_backward %>% group_by(from) %>% summarise(value = mean(value))
#change the column names
colnames(fiction_dist_forward)[2] <- "transience"
colnames(poetry_dist_forward)[2] <- "transience"
colnames(drama_dist_forward)[2] <- "transience"
colnames(fiction_dist_backward)[2] <- "novelty"
colnames(poetry_dist_backward)[2] <- "novelty"
colnames(drama_dist_backward)[2] <- "novelty"
#full join the backwards and forwards data frames
fiction_dist <- full_join(fiction_dist_backward, fiction_dist_forward, by = "from")
poetry_dist <- full_join(poetry_dist_backward, poetry_dist_forward, by = "from")
drama_dist <- full_join(drama_dist_backward, drama_dist_forward, by = "from")
#remove nas
fiction_dist <- fiction_dist[complete.cases(fiction_dist), ]
poetry_dist <- poetry_dist[complete.cases(poetry_dist), ]
drama_dist <- drama_dist[complete.cases(drama_dist), ]
#calculate resonance and attach it to the dataframe
fiction_dist$resonance <- fiction_dist$novelty - fiction_dist$transience
poetry_dist$resonance <- poetry_dist$novelty - poetry_dist$transience
drama_dist$resonance <- drama_dist$novelty - drama_dist$transience
#scale novelty, transience and resonance
fiction_dist[,2:4] <- scale(fiction_dist[,2:4])
poetry_dist[,2:4] <- scale(poetry_dist[,2:4])
drama_dist[,2:4] <- scale(drama_dist[,2:4])
#change the column names
colnames(fiction_dist)[1] <- "year"
colnames(poetry_dist)[1] <- "year"
colnames(drama_dist)[1] <- "year"
cor(fiction_dist)
cor(poetry_dist)
cor(drama_dist)
#produce a scatter plot of the relationship between population and number of branches in each LA
p <- ggplot(fiction_dist, aes(novelty, resonance)) +
labs(title = "Relationship between novelty and resonance in the fiction corpus") +
geom_point() +
stat_smooth(method = "lm") +
xlab("Novelty") +
ylab("Resonance")
#print the plot
p
#produce a scatter plot of the relationship between population and number of branches in each LA
p <- ggplot(poetry_dist, aes(novelty, resonance)) +
labs(title = "Relationship between novelty and resonance in the poetry corpus") +
geom_point() +
stat_smooth(method = "lm") +
xlab("Novelty") +
ylab("Resonance")
p
#produce a scatter plot of the relationship between population and number of branches in each LA
p <- ggplot(drama_dist, aes(novelty, resonance)) +
labs(title = "Relationship between novelty and resonance in the drama corpus") +
geom_point() +
stat_smooth(method = "lm") +
xlab("Novelty") +
ylab("Resonance")
p
fiction_data
fiction.dist
fiction_dist
